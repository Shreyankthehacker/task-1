// fork_example.cpp
#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

using namespace std;

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed" << endl;
        return 1;
    } else if (pid == 0) {
        cout << "Child process (PID: " << getpid() << ")" << endl;
        return 0;
    } else {
        cout << "Parent process (PID: " << getpid() << ", Child PID: " << pid << ")" << endl;
        wait(nullptr);
        cout << "Child process finished" << endl;
        return 0;
    }
}

// exec_example.cpp
#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string>

using namespace std;

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed" << endl;
        return 1;
    } else if (pid == 0) {
        execlp("ls", "ls", "-l", nullptr);
        cerr << "Exec failed" << endl;
        return 1;
    } else {
        wait(nullptr);
        cout << "Command execution finished" << endl;
        return 0;
    }
}

// sleep_example.cpp
#include <iostream>
#include <unistd.h>

using namespace std;

int main() {
    cout << "Sleeping for 5 seconds..." << endl;
    sleep(5);
    cout << "Wake up!" << endl;
    return 0;
}

// getpid_example.cpp
#include <iostream>
#include <unistd.h>

using namespace std;

int main() {
    cout << "Process ID: " << getpid() << endl;
    return 0;
}

// kill_example.cpp
#include <iostream>
#include <unistd.h>
#include <csignal>
#include <sys/types.h>

using namespace std;

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed" << endl;
        return 1;
    } else if (pid == 0) {
        sleep(10);
        cout << "Child finished." << endl;
        return 0;
    } else {
        sleep(2);
        if (kill(pid, SIGTERM) == 0) {
            cout << "Signal sent to child process" << endl;
        } else {
            cerr << "Failed to send signal" << endl;
        }
        wait(nullptr);
        cout << "Child process terminated" << endl;
        return 0;
    }
}

// wait_example.cpp
#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

using namespace std;

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed" << endl;
        return 1;
    } else if (pid == 0) {
        sleep(3);
        cout << "Child process exiting" << endl;
        return 0;
    } else {
        cout << "Parent waiting for child..." << endl;
        wait(nullptr);
        cout << "Child process exited" << endl;
        return 0;
    }
}

// fileio_example.cpp
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <cstring>

using namespace std;

int main() {
    const char* filename = "test.txt";
    const char* writeData = "Hello, file I/O!";
    char readBuffer[100];

    int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        cerr << "Error opening file for writing" << endl;
        return 1;
    }
    write(fd, writeData, strlen(writeData));
    close(fd);

    fd = open(filename, O_RDONLY);
    if (fd == -1) {
        cerr << "Error opening file for reading" << endl;
        return 1;
    }
    ssize_t bytesRead = read(fd, readBuffer, sizeof(readBuffer) - 1);
    if (bytesRead > 0) {
        readBuffer[bytesRead] = '\0';
        cout << "Read from file: " << readBuffer << endl;
    }
    close(fd);
    return 0;
}
